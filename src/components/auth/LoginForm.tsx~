'use client';

import { useState } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Eye, EyeOff, Lock, Mail } from 'lucide-react';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

export function LoginForm() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [formErrors, setFormErrors] = useState<{email?: string, password?: string}>({});

  function validateForm(email: string, password: string) {
    const errors: {email?: string, password?: string} = {};

    if (!email) {
      errors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      errors.email = 'Email is invalid';
    }

    if (!password) {
      errors.password = 'Password is required';
    } else if (password.length < 8) {
      errors.password = 'Password must be at least 8 characters';
    }

    return errors;
  }

  async function onSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsLoading(true);

    const formData = new FormData(event.currentTarget);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;

    const validationErrors = validateForm(email, password);

    if (Object.keys(validationErrors).length > 0) {
      setFormErrors(validationErrors);
      setIsLoading(false);
      return;
    }

    try {
      const result = await signIn('credentials', {
        email,
        password,
        redirect: false,
      });

      if (result?.error) {
        toast.error('Invalid credentials', {
          description: 'Please check your email and password',
        });
        return;
      }

      router.push('/dashboard');
      toast.success('Welcome back!', {
        description: 'You have successfully logged in',
      });
    } catch (error) {
      toast.error('Something went wrong', {
        description: 'Please try again later',
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
      <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="w-full max-w-md space-y-8"
      >
        <div className="text-center">
          <h2 className="text-3xl font-bold text-gray-900">Sign in to your account</h2>
          <p className="mt-2 text-sm text-gray-600">
            Enter your credentials to access your dashboard
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={onSubmit}>
          <div className="space-y-4">
            <div className="relative">
              <Input
                  label="Email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  leftIcon={<Mail className="text-gray-400" />}
                  error={formErrors.email}
              />
              {formErrors.email && (
                  <motion.p
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="text-red-500 text-xs mt-1"
                  >
                    {formErrors.email}
                  </motion.p>
              )}
            </div>

            <div className="relative">
              <Input
                  label="Password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="current-password"
                  required
                  leftIcon={<Lock className="text-gray-400" />}
                  error={formErrors.password}
                  rightIcon={
                    showPassword ?
                        <EyeOff
                            onClick={() => setShowPassword(false)}
                            className="cursor-pointer text-gray-400 hover:text-gray-600"
                        /> :
                        <Eye
                            onClick={() => setShowPassword(true)}
                            className="cursor-pointer text-gray-400 hover:text-gray-600"
                        />
                  }
              />
              {formErrors.password && (
                  <motion.p
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="text-red-500 text-xs mt-1"
                  >
                    {formErrors.password}
                  </motion.p>
              )}
            </div>
          </div>

          <Button
              type="submit"
              className="w-full"
              disabled={isLoading}
              variant="primary"
          >
            {isLoading ? 'Signing in...' : 'Sign in'}
          </Button>
        </form>

        <div className="text-center">
          <motion.a
              href="/forgot-password"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="text-sm text-primary-600 hover:text-primary-800 transition-colors"
          >
            Forgot your password?
          </motion.a>
        </div>
      </motion.div>
  );
}